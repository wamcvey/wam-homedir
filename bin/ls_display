#!/usr/bin/env python

"""manipulates a list of data into columns that fit the screen width

This should act on arbitrary datasets just like ls(1) does on files
(There used me a commandline utility, to "reshape matrix", perhaps named
'rs' or something like that, that did something similar. 
"""

__author__ =	"William McVey"
__date__ = 	"26 May, 2004"
__revision__ =	"$Id:$"


import os
import sys

def get_column_count():
	"""Tries to find the number of columns on the current display

	Can raise an exception if the columns can't be found
	"""
	try:
		# The 'import' of curses is not in outer scope since some
		# platforms don't have 'curses' module and I want to catch
		# that in my application code, not on import of my module
		import curses			
		win = curses.initscr()
		(y, cols)  = win.getmaxyx()
		curses.endwin()
	except:
		cols=int(os.environ['COLUMNS'])
	return cols

if __name__ == '__main__':
	import sys
	import os
	from optparse import OptionParser       # aka Optik

	Progname=os.path.basename(sys.argv[0])
	Usage="""\
%prog usage: [-s] [files]
%prog usage: -h
%prog usage: -V 
"""
	optparser = OptionParser(usage=Usage, version="%prog: $Id:$" )
	optparser.add_option("-s", "--sort", dest = "sort",
	   action="store_true", help="sort input data")
	optparser.add_option("-c", "--columns", dest="columns",
	   action="store", type="int", help="specify number of columns available to fill")
	(options, params) = optparser.parse_args()

	if options.columns:
		cols = options.columns
	else:
		try:
			cols = get_column_count()
		except:
			sys.exit("%s: Couldn't determine number of columns" % Progname)

	if len(params) == 0:
		params = ["-"]

	data = []
	shortest=cols 
	for input in params:
		if input == "-":
			input = sys.stdin
		else:
			input = file(input)
		for line in input:
			if len(line) < shortest:
				shortest = len(line)
			data.append(line[:-1] + " ")

	if len(data) == 0:
		# avoid all the column manipulations if we have no data
		sys.exit(0)
	
	if options.sort:
		data.sort()

	if cols//shortest > len(data):
		max_columns = len(data)
	else:
		max_columns = cols//shortest
	
	good_rows = 0
	for column_attempt in range(max_columns, 1,  -1):
		# trying to find the number of columns of data we can
		# display
		data_slices=[]
		slice_len=len(data) // column_attempt
		if len(data) % column_attempt != 0:
			slice_len += 1
		if len(range(0, len(data), slice_len)) < column_attempt:
			# skip a column attempt if it doesn't give us an even number of 
			# columns (we'll catch the rounded down version later)
			continue

		for slice in  range(0, len(data), slice_len):
			data_slice = data[slice:slice+slice_len]
			col_max = 0
			for colmember in data_slice:
				if len(colmember) > col_max:
					col_max = len(colmember)
			data_slices.append([x.ljust(col_max) for x in data_slice])

		good_rows = 1
		for row_attempt in map(None, *data_slices):
			row = " ".join(filter(None, row_attempt))
			if len(row) >= cols-1:
				good_rows = 0
				break
		if good_rows:		# all rows are good 
			break

	if good_rows:
		for row_data in map(None, *data_slices):
			print " ".join(filter(None, row_data))
	else:
		for element in data:
			print element
